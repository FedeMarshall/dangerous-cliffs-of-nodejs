doctype
html(lang='en')
  head
    meta(charset='utf-8')

    title the dangerous cliffs of node.js

    meta(name='description', content='Some common but surprisingly impactful or difficult to deal with errors in Node.js')
    meta(name='author', content='Scott Nonnenberg')

    meta(name='apple-mobile-web-app-capable', content='yes')
    meta(name='apple-mobile-web-app-status-bar-style', content='black-translucent')

    meta(name='viewport', content='width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no')

    link(rel='stylesheet', href='css/reveal.min.css')
    link(rel='stylesheet', href='css/theme/default.css', id='theme')
    link(rel='stylesheet', href='css/zenburn.css')
    //- If the query includes 'print-pdf', use the PDF print sheet --
    script.
      document.write( "<link rel='stylesheet' href='css/" +
       ( window.location.search.match( /print-pdf/gi ) ? 'pdf' : 'paper' ) + ".css' type='text/css' media='print'>" );

    //- if lt IE 9
    //-   script(src='js/html5shiv.js')

    style.
      .center {
        display: inline-block;
        margin-left: auto;
        margin-right: auto;
      }
      .runner {
        position: relative;
      }
      a.run {
        position: absolute;
        bottom: .5em;
        right: 2em;
      }
      .reveal a.run:not(.image) {
        color: white;
      }
      .reveal .spacer {
        margin-top: 1em;
      }
      .reveal th, .reveal td {
        padding: .3em;
      }
      .reveal th {
        font-weight: bold;
      }
      .reveal img.plain {
        border: 0;
        box-shadow: none;
        background: none;
      }
      .reveal img.max {
        width: 95%;
      }
      .reveal .small {
        text-align: center;
        font-size: 60%;
      }


  body
    .reveal

      .slides
        section
          h1 The Dangerous Cliffs of Node.js
          h3.spacer Because production-ready is not easy!
          h3.spacer: a(target='_blank', href='https://scottnonnenberg.com') Scott Nonnenberg
          h4: a(target='_blank', href='http://scottnonnenberg.github.io/dangerous-cliffs-of-nodejs/dist/slides.html') github.com/scottnonnenberg/dangerous-cliffs-of-nodejs
          .center.small
            | 'space'/arrow keys/swipe to navigate, 'esc' to zoom out, 's' for speaker notes

        section
          section
            h1 Why me?
            aside.notes
              ul
                li History with other platforms like Rails, iOS, .NET, Java
                li Developing in node.js for over three years now
                li Own apps, and freelance...

          section
            h2 Walmart Labs
            h2 Nordstrom Innovation Lab
            h2 HaikuDeck
            h2 MuleSoft

          section
            h2 Classic ASP
            h2 C++
            h2 Java
            h2 .NET
            h2 iOS
            h2 Ruby on Rails

        section
          section
            h1 Why this topic?
          
          section
            h1 The gap
            aside.notes
              ul
                li Lots of content tutorials/feature implementation
                li Much less about getting to production-ready

          section
            h1 How about a hike?
            aside.notes
              ul
                li Node.js is like...
                li A friend says to you... 
                li Come on this hike with me! So great!

          section
            img.max(src='img/huashin trail.jpg')
            aside.notes
              ul
                li But then the trail is like this!
                li Your friend says "Oh yeah, we had some trouble the first couple times too..."
                li Node.js has some unique challenges.

        section
          img.max(src='img/beware dangerous cliff.jpg')
          aside.notes
            ul
              li Let's put some signs up to help our fellow hikers!

        section
          section
            h1 Crashes
            aside.notes 
              ul
                li What do we mean by this?
                li Calling a non-function
                li Dotting into a null/undefined var

          section
            h1 Demo: Crashes

          section
            h1 Benefit?
            h1 Impact
            aside.notes
              ul
                li Took it down to low/medium

          section
            h1 Deployment

        section
          img.max(src='img/cliff edges are dangerous.jpg')

        section
          section
            h1 Hangs

          section
            h1 Demo: Hangs

          section
            h1 Benefit?
            h1 Detection
            aside.notes
              ul
                li Now we know when it's happening...
        
          section
            h1 non-server apps
            aside.notes
              ul
                li MUST have logging and/or stats collection
                li BOTH positive and negative metrics
                li if just errors, the process could be hanging or not running and you'd never know

        section
          img.max(src='img/dangerous cliffs.jpg')

        section
          section
            h1 Event loop unavailability
  
          section
            h1 Demo: Event loop

          section
            h1 Benefit?
            h1 Prevention
            h1 Detection
            aside.notes
              ul
                li no magic solution for event loop that's slowing down
                li best we can do is try to plan for it, and monitor closely

        section
          img.max(src='img/steep and crumbling cliffs.jpg')

        section
          section
            h1 Error from
            h1 async call

          section
            h1 Demo

          section
            h1 Benefit?
            h1 Debuggability
            aside.notes
              ul
                li We can make it easier to see what happened, if we can't prevent it

        section
          img.max(src='img/rocky trail.jpg')

        section
          section    
            h1 prevention
            h1 impact mitigation
            h1 detection
            h1 debuggability

         section
            h1 Better node.js understanding?
            aside.notes
              ul
                li Edge cases help you understand the system!

        section
          h1 Thanks!
          aside.notes
            ul
              li Go forth and make awesome things!

        section
          h1 Questions?

        section
          img.max(src='img/sheer unstable cliffs.jpg')

        section
          section
            h1 Hammering other services
  
          section
            h1 Demo

          section
            h1 Benefit?
            h1 Everyone's Happy
            aside.notes
              ul
                li let's be nice, everyone.
                li node.js is really good at parallelizing, some aren't

        section
          h2 Image sources
          ul
            li huashin trail
            li beware dangerous cliff
            li cliff edges are dangerous
            li dangerous cliffs
            li sheer unstable cliffs
            li steep and crumbling cliffs
            li rocky trail

        section
          h2 Know your libraries!
          ul
            li 
              a(href='https://mongodb.github.io/node-mongodb-native/driver-articles/mongoclient.html#connection-pool-configuration') mongodb
              |  - connection pool, default size of 5
            li
              a(href='https://github.com/brianc/node-postgres/wiki/pg#pgdefaultspoolsize') pg
              |  - connection pool, default size of 10
            li
              a(href='https://github.com/felixge/node-mysql/#pool-options') mysql
              |  - connection pool, default size of 10
            li
              a(href='https://github.com/NodeRedis/node_redis/blob/master/examples/backpressure_drain.js') redis
              |  - queues up extra commands

        //- section
        //-   section
        //-     h1 Resources
          
        //-   section
        //-     h2 prevention
        //-     ul
        //-       li testing: mocha, sinon, chai, supertest, vows, intern, assert, etc.
        //-       li code coverage: istanbul, blanket
        //-       li static analysis: jshint, eslint, js-complexity, jscs
        //-       li thehelp-project gets things in place quick
          
        //-   section
        //-     h2 impact mitigation
        //-     ul
        //-       li graceful shutdown: thehelp-cluster
        //-       li throttling when busy: toobusy
        //-       li TODO: module? concurrency limits
        //-       li TODO: module? payload size limits

        //-   section
        //-     h2 deployment
        //-     ul
        //-       li git push (heroku-style), docker, ansible, capistrano
        //-       li graceful shutdown: thehelp-cluster

        //-   section
        //-     h2 detection
        //-     ul
        //-       li slow event loop: toobusy
        //-       li multi-format error capture: thehelp-last-ditch
        //-       li stats: graphite
        //-       li logging: winston, bunyan, thehelp-log-shim, ELK stack
            
        //-   section
        //-     h2 debuggability
        //-     ul
        //-       li promises (like when), thehelp-core/breadcrumbs
        //-       li logging: winston, bunyan, thehelp-log-shim, ELK stack

        //-   section
        //-     h2 hangs: downstream impact
        //-     ul.spacer
        //-       li
        //-         strong Chrome
        //-         |  - error message after 2 minutes
        //-       li
        //-         strong nginx
        //-         |  - default timeout of 60 seconds
        //-       li
        //-         strong Firefox
        //-         |  - tbd
        //-       li
        //-         strong Safari
        //-         |  - tbd desktop, tbd mobile
        //-       li
        //-         strong IE?
        //-         |  - tbd

    script(src='js/head.min.js')
    script(src='js/reveal.min.js')

    script.
      Reveal.initialize({
        controls: false,
        progress: true,
        history: true,
        center: true,
        overview: true,

        theme: 'default',
        transition: 'linear',

        dependencies: [
          { src: 'js/classList.js', condition: function() { return !document.body.classList; } },
          { src: 'lib/notes/notes.js', async: true },
        ],

        // The "normal" size of the presentation, aspect ratio will be preserved
        // when the presentation is scaled to fit different resolutions. Can be
        // specified using percentage units.
        width: 800,
        height: 600,

        // Factor of the display size that should remain empty around the content
        margin: 0.1,

        // Bounds for smallest/largest possible scale to apply to content
        minScale: 0.2,
        maxScale: 3.0
      });
